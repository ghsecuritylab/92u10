
export HAL=$(TOPDIR)/drivers/wlan/hal
export ENETDIR=$(TOPDIR)/linux/drivers/ethernet
export ATH_TOOL_DIR=$(TOPDIR)/drivers/wlan/os/linux/tools/
export ATH_DFS=$(TOPDIR)/drivers/wlan/lmac/dfs
export BOOTLOADERDIR=$(TOPDIR)/boot/u-boot
export ATHEROSPATH=$(TOPDIR)/drivers/wlan
export I2SDIR=$(TOPDIR)/linux/drivers/i2s
export I2SMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/i2s
export SLICDIR=$(TOPDIR)/linux/drivers/slic
export SLICMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/slic
export USBMODPATH=$(INSTALL_ROOT)/lib/modules/$(KERNELVER)/usb
export USBDIR=${KERNELPATH}/drivers/usb
export IPTABLESDIR=$(TOPDIR)/apps/iptables/iptables-1.4.5-qos
export SSDK_DIR=$(ENETDIR)/s17_ssdk
export NTFS_3G_DIR=$(TOPDIR)/apps/ntfs-3g-2010.10.2
#
# Makefile for WASP Fusion build.  It has dependancies for both
# the "common" build and the "jffs2" build.  This is unique for
# each board type, and must be configured for each board.
#

# To enable library optimization (removing unused object code from
# shared libraries) set BUILD_LIBRARYOPT to 'y' else 'n'
BUILD_LIBRARYOPT := n

ifeq ($(GWLANG),)
export GWLANG=mlang_en
endif

export fs_build=$(BUILD_TYPE)_build
export stage2_build=

ifdef BOOT_FROM_NAND
ifeq ($(BUILD_TYPE), jffs2)
export fs_build=nandjffs2_build
endif
export stage2_build=stage2
endif

ifeq ($(strip $(BUILD_CONFIG)),_mi124)
export JFFS2FILE=mi124$(ETH_CONFIG)-jffs2
export IMAGEPATH=$(TOPDIR)/images/mi124
else
ifeq ($(strip $(BUILD_CONFIG)),_mi124_offload)
export JFFS2FILE=mi124_offload-jffs2
export IMAGEPATH=$(TOPDIR)/images/mi124_offload
else
ifeq ($(strip $(BUILD_CONFIG)),_ap123)
export JFFS2FILE=ap123-jffs2
export IMAGEPATH=$(TOPDIR)/images/ap123
endif
endif
endif

ifneq ($(findstring _routing,$(BUILD_CONFIG)),)
db12x_build: common_mainline iptables_build offload_build $(fs_build)
else
ifeq ($(BUILD_CONFIG),_hwaccel)
db12x_build: common_mainline iptables_build offload_build $(fs_build)
else
ifeq ($(BUILD_CONFIG), _i2ssmb)
db12x_build: common_mainline usb_build i2s_build athplay_tools_fus samba_build offload_build $(fs_build)
else
ifeq ($(BUILD_CONFIG), _mi124_offload)
db12x_build: common_mainline offload_build vmlrd stage1
else
ifeq ($(BUILD_CONFIG), _mi124)
db12x_build: common_mainline offload_build
else
ifeq ($(BUILD_CONFIG), _ap123)
db12x_build: common_mainline usb_build offload_build
else
db12x_build: common_mainline offload_build usb_build i2s_build athplay_tools_fus $(fs_build) 
endif
endif
endif
endif
endif
endif

#	lzma_uimage kernel_info enet_build usb_build busybox_build wpa2 \

ifeq ($(BUILD_ATHR_HOSTAP),1)
common_mainline: check_tftp rootfs_prep toolchain_build \
	kernel_build kernel_info enet_build busybox_build athr-hostapd athr-wpa_supplicant \
	sar cgi lzma_uimage uboot_mainline samba_build \
	ntfs3g_build $(stage2_build)
else
common_mainline: check_tftp rootfs_prep toolchain_build \
	kernel_build kernel_info enet_build busybox_build wpa2 \
	sar cgi lzma_uimage uboot_mainline samba_build \
	ntfs3g_build $(stage2_build)
endif
#	lzma_uimage kernel_info enet_build busybox_build wpa2 \
#	uboot_mainline sar cgi


iptables_build:
	@echo making iptables
	cd $(IPTABLESDIR) && \
	$(MAKE) clean && \
	$(MAKE) NO_SHARED_LIBS=1 && \
	cp iptables $(INSTALL_ROOT)/sbin/iptables
#	cp .libs/iptables-multi $(INSTALL_ROOT)/sbin/iptables && \
#	cp -P .libs/libxtables*.so* $(INSTALL_ROOT)/lib && \
#	cp -P libiptc/.libs/libip4tc*.so* $(INSTALL_ROOT)/lib && \
#	cd extensions && \
#	cp libipt_DNAT.so libipt_MASQUERADE.so libipt_SNAT.so libxt_conntrack.so libxt_standard.so libxt_state.so libxt_tcp.so libxt_udp.so libipt_icmp.so libxt_helper.so $(INSTALL_ROOT)/lib

#	$(MAKE) KERNEL_DIR=$(KERNELPATH) NO_SHARED_LIBS=1 && \
#	$(TOOLPREFIX)strip -s iptables && \
#	cp iptables-multi $(INSTALL_ROOT)/sbin/iptables

samba_build:
ifeq ($(BUILD_SAMBA),y)
	@echo Building samba ver 3.0.24.....
	cd ../apps/samba-3.0.24/source; \
        make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld ; \
        mkdir $(INSTALL_ROOT)/usr/local; \
        make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld STRIP=$(TOOLPREFIX)strip install prefix=$(INSTALL_ROOT)/usr/local;
endif

ntfs3g_build:
ifeq ($(BUILD_NTFS3G),y)
	@echo Building NTFS-3g......
	@echo BEGIN make ntfs-3g at `date`
	cd $(NTFS_3G_DIR) && \
	$(MAKE) clean && \
	$(MAKE) prefix=$(INSTALL_ROOT) all install && \
	touch $(INSTALL_ROOT)/etc/mtab;
	@echo END make ntfs-3g at `date`
endif

#
# Unique rules for the ag7240 PHY with the wasp   board
#

ifeq ($(strip $(ETH_CONFIG)), _s17_hwaccel)
enet_build: ssdk_build
else
enet_build:
endif
	cd $(ENETDIR) && rm -f *.o *.ko *.mod.* && make -f Makefile.inc enet_config.h 
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(ENETDIR) modules
	test -d $(MODULEPATH) || mkdir -p $(MODULEPATH)
	cp $(ENETDIR)/athrs_gmac.ko $(MODULEPATH)

i2s_build: kernel_build
	cd $(I2SDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(I2SDIR) modules
	test -d $(I2SMODPATH) || mkdir -p $(I2SMODPATH)
	cp $(I2SDIR)/ath_i2s.ko $(I2SMODPATH)

slic_build: kernel_build
	cd $(SLICDIR) && rm -f *.o *.ko *.mod.*
	$(MAKEARCH) -C $(KERNELPATH) SUBDIRS=$(SLICDIR) modules
	test -d $(SLICMODPATH) || mkdir -p $(SLICMODPATH)
	cp $(SLICDIR)/ar7240_slic.ko $(SLICMODPATH)

athplay_tools_fus:
	@echo making athplay_tools
	cd ../apps/athplay; make clean; make; \
	$(STRIP) athplay; \
	cp -f athplay $(INSTALL_ROOT)/bin;

#slic_app:
#	@echo making slic application
#	cd ../apps/slicapp; make clean; make; \
#	$(STRIP) slicapp; \
#	cp -f slicapp $(INSTALL_ROOT)/bin;

WIRELESSTOOLNAMES := athstats athstatsclear 80211stats athkey athchans athctrl\
	athdebug 80211debug wlanconfig athcwm athampdutrc atrc \
	pktlogconf pktlogdump radartool cgiMain
wireless_tools_main:
	@echo making wireless_tools 
	if test -n "$(WIRELESSTOOLS)"; then \
	cd ../apps/$(WIRELESSTOOLS); make clean; make; \
	cp -f $(WIRELESSTOOLSLIB) $(INSTALL_ROOT)/lib; \
	cp -f iwpriv $(INSTALL_ROOT)/sbin; \
	cp -f iwconfig $(INSTALL_ROOT)/sbin; \
	cp -f iwlist $(INSTALL_ROOT)/sbin; \
	cd $(TOPDIR)/drivers/wlan/os/linux/tools && make clean; \
	make wlanconfig BUILD_STATIC=$(BUILD_STATIC); \
	cp -f wlanconfig $(INSTALL_ROOT)/sbin; \
	fi

ath_tools: ath_tools_clean
	@echo makeing ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools;

ath_tools_clean:
	@echo cleaning ath tools;\
	cd ../drivers/wlan/os/linux/tools;\
	make ath_tools_clean;

cgi: ath_tools_clean
	@echo makeing cgi;\
	cd ../drivers/wlan/os/linux/tools;\
	rm -rf cgiMain;\
	make cgiMain;

art_mod:
	@echo Making ART Module
	cd ../apps/art && make -f makefile.soc.linux.mips clean && \
	make -f makefile.soc.linux.mips hydra
	cp ../apps/art/modules/art.ko $(MODULEPATH)/art.ko

main_hal_build: 
	@echo making hal
	if test -n "$(TARGETARCH)"; then \
	cd $(HAL)/linux && make TARGET=$(TARGETARCH) clean &&  \
	make TARGET=$(TARGETARCH) && make TARGET=$(TARGETARCH) release; \
	fi
driver_buildnc: 
	@echo making umac
	cd $(TOPDIR)/drivers/wlan/os/linux && \
	$(MAKEARCH) TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
	$(MAKE) $(fs_build)
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) clean

##################################################################
############### Offload Dev Build Framework ######################
##################################################################

export OFFLOAD_STACK=$(TOPDIR)/offload_stack
export OFFLOAD_STACK_APP=$(TOPDIR)/apps/offload_apps/
export OFFLOAD_BUILD=host/build/linux


ifeq ($(OFFLOAD_LAN_BYPASS),1)
target_list +=  lanbyp_build
clean_list += lanbyp_clean
endif


lanbyp_build:
ifeq ($(OFFLOAD_LAN_BYPASS),1)
	@echo "Building the LANBypass Library and CLI ..."
	cd $(OFFLOAD_STACK)/bypass/host/linux &&	\
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) all
else
	@echo " ..."
endif

lanbyp_clean:
ifeq ($(OFFLOAD_LAN_BYPASS),1)
	@echo "Cleaning the LANBypass Library ..."
	cd $(OFFLOAD_STACK)/bypass/host/linux &&	\
	$(MAKEARCH) clean
else
	@echo " ..."
endif


acfg_build:
	@echo "Building the ACFG Library ..."
	cd $(OFFLOAD_STACK)/acfg/linux &&	\
	$(MAKEARCH) TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALL_ROOT) TARGET=$(TARGETARCH) install
	cp $(OFFLOAD_STACK)/acfg/linux/acfg_test_app/acfg_tool $(TFTPPATH)
		
acfg_clean:
	@echo "Cleaning the ACFG Library ..."
	cd $(OFFLOAD_STACK)/acfg/linux &&	\
	$(MAKEARCH) TARGET=$(TARGETARCH) clean 

offload_build: wireless_tools_main ath_tools acfg_build lanbyp_build
	@echo "Building the Offload host ..."
	cd $(OFFLOAD_STACK)/driver/$(OFFLOAD_BUILD)   &&        \
	$(MAKEARCH) DESTDIR=$(INSTALL_ROOT) BUS=gmac flash && \
	$(MAKEARCH) DESTDIR=$(INSTALL_ROOT) BUS=gmac install;
	cd $(OFFLOAD_STACK)/wsupp_bridge/linux && \
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) hst_install
	find $(OFFLOAD_STACK)/driver/$(OFFLOAD_BUILD) -name *.ko -exec cp -vf {} $(TFTPPATH) ';'
	cp $(OFFLOAD_STACK)/wsupp_bridge/linux/atd_wsupp_bridge $(TFTPPATH)

	# Build wsupp_helper
	cd $(OFFLOAD_STACK)/wsupp_helper/linux && \
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) hst_install
	cp $(OFFLOAD_STACK)/wsupp_helper/linux/wsupp_helper $(TFTPPATH)

offload_clean: acfg_clean lanbyp_clean
	cd $(OFFLOAD_STACK)/driver/$(OFFLOAD_BUILD) &&  \
	$(MAKEARCH) TARGET=$(TARGETARCH) BUS=gmac flash_clean
	
	# Clean wsupp_helper
	cd $(OFFLOAD_STACK)/wsupp_helper/linux && \
	$(MAKEARCH) CC=$(TOOLPREFIX)gcc DESTDIR=$(INSTALL_ROOT) clean


driver_build: main_hal_build wireless_tools_main ath_tools offload_build
	@echo making umac
	cd $(TOPDIR)/drivers/wlan/os/linux && \
	$(MAKEARCH) TARGET=$(TARGETARCH) clean \
	&& $(MAKEARCH) TARGET=$(TARGETARCH) && \
	$(MAKEARCH) DESTDIR=$(INSTALLROOT) TARGET=$(TARGETARCH) install
	$(MAKE) $(fs_build)

usb_build: kernel_build
	test -d $(USBMODPATH) || mkdir -p $(USBMODPATH)
	cp -f $(USBDIR)/core/usbcore.ko ${USBMODPATH}
	cp -f ${USBDIR}/host/ehci-hcd.ko ${USBMODPATH}
	cp -f ${USBDIR}/storage/usb-storage.ko ${USBMODPATH}
	cp -f ${USBDIR}/gadget/g_ether.ko ${USBMODPATH}
	cp -f ${USBDIR}/gadget/ath_udc.ko ${USBMODPATH}

uboot_mainline:
	@echo making uboot...
	cd $(BOOTLOADERDIR) && make db12x_config
	cd $(BOOTLOADERDIR) && make clean && make
	cp $(BOOTLOADERDIR)/u-boot.bin $(IMAGEPATH)

stage1:
	@echo making 1st stage f/w ...
	@cd $(TOPDIR)/boot/rom-boot-drv && make clean all
	cp $(TOPDIR)/boot/rom-boot-drv/fwu_rombootdrv.c $(IMAGEPATH)

$(TOPDIR)/boot/utility/bin/checksum:
	@echo $@
	@cd $(TOPDIR)/boot/utility/checksum; make

$(TOPDIR)/boot/utility/bin/bin2hex:
	@echo $@
	@cd $(TOPDIR)/boot/utility/bin2hex; make

stage2: $(TOPDIR)/boot/utility/bin/checksum $(TOPDIR)/boot/utility/bin/bin2hex stage1
	@echo Combining 1st and 2nd stage f/w ...
	@cd $(TOPDIR)/boot/rom-boot-drv && ./mk2stage -2 $(IMAGEPATH)/u-boot.bin && cp 2fw.bin $(IMAGEPATH)

uboot_tools:
	@echo Making uboot tools...
	cd $(BOOTLOADERDIR) && $(MAKEARCH) mrproper
	cd $(BOOTLOADERDIR) && make db12x_config
	cd $(BOOTLOADERDIR) && make tools

lzma_build:
	@echo making lzma.....
	cd $(TOPDIR)/apps/lzma457/CPP/7zip/Compress/LZMA_Alone && \
	make -f makefile.gcc clean && \
	make -f makefile.gcc  && \
	echo copying lzma... && \
	cp -f lzma	$(TOPDIR)/build/util

lzma_uimage: kernel_build lzma_build uboot_tools
	@echo "Generating LZMA'ed kernel....."
	cd $(KERNELPATH)/arch/$(KERNELARCH)/boot && \
	$(TOPDIR)/build/util/lzma e $(KERNELTARGET) $(KERNELTARGET).lzma && \
	cp $(KERNELTARGET).lzma $(TFTPPATH)/$(KTFILE).lzma && \
	cp $(KERNELTARGET).lzma $(IMAGEPATH)/$(KTFILE).lzma;
	echo Making uImage...
	cd util && mkuImage.sh $(UBOOTDIR)/tools $(KERNELPATH) $(BUILD_CONFIG)$(BUILD_EXT) lzma

# Note: doing a make (make all) in gateway automatically does an install
gateway_build:
	@echo BEGIN make gateway_build at `date`
	cd ../apps/gateway && $(MAKE) GATEWAY_MAKE_CLEAN=y clean && \
	$(MAKE) GATEWAY_MAKE_CLEAN=y CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld all
	@echo END make gateway_build at `date`

vmlrd: kernel_build kernel_info ram_build
ifdef BUILD_CONFIG
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle -b ${BUILD_CONFIG}
else
ifdef ETH_CONFIG
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle -b ${ETH_CONFIG}
else
	cd $(IMAGEPATH) && $(TOPDIR)/build/util/mksingle
endif
endif




# Atheros S17 SSDK for hwnat, hwacl
ssdk_build:
	@echo making SSDK....
	cd $(SSDK_DIR) && \
	$(MAKE) clean; $(MAKE) && \
	cp build/bin/ssdk_ks_km.a $(ENETDIR)/phys/ && \
	cp build/bin/ssdk_sh $(INSTALL_ROOT)/sbin/ssdk_sh
	@echo end of making SSDK


#building hostapd and supplicant 8.0 versions
athr-hostapd:
	@echo Making athr-hostapd  at `date`
	if ( test -e ../apps/athr-hostap/hostapd ) then \
	cp -f scripts/$(BOARD_TYPE)/athr_hostapd.conf ../apps/athr-hostap/hostapd/.config; \
	cd ../apps/athr-hostap/hostapd; make clean; make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld; \
	cp hostapd hostapd_cli $(INSTALL_ROOT)/sbin; \
	fi
	cp ../rootfs/cgiCommon/etc/ath/hostapd0.7.0_conf/* $(INSTALL_ROOT)/etc/ath
	rm -rf $(INSTALL_ROOT)/etc/ath/hostapd0.7.0_conf
	mkdir -p $(INSTALL_ROOT)/etc/wpa2

athr-wpa_supplicant:
	@echo Making athr wpa_supplicant  at `date`
	if ( test -e ../apps/athr-hostap/wpa_supplicant ) then \
	cp -f scripts/$(BOARD_TYPE)/athr_supplicant.conf ../apps/athr-hostap/wpa_supplicant/.config; \
	cd ../apps/athr-hostap/wpa_supplicant; make clean; make CC=$(TOOLPREFIX)gcc AR=$(TOOLPREFIX)ar LD=$(TOOLPREFIX)ld; \
	cp wpa_supplicant wpa_cli $(INSTALL_ROOT)/sbin; \
	fi

